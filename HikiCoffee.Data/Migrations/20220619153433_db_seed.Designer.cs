// <auto-generated />
using System;
using HikiCoffee.Data.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HikiCoffee.Data.Migrations
{
    [DbContext(typeof(HikiCoffeeDbContext))]
    [Migration("20220619153433_db_seed")]
    partial class db_seed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("HikiCoffee.Data.Entities.AppointmentSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("AppointmentTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CoffeeTableId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpirationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("MoreInfo")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CoffeeTableId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("AppointmentSchedules", (string)null);
                });

            modelBuilder.Entity("HikiCoffee.Data.Entities.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e1db1200-1bb6-4156-9da3-135e91d94aba"),
                            ConcurrencyStamp = "3392e45a-2519-4cf5-8ed5-6e7d6b8137e9",
                            Description = "Administrator role",
                            Name = "admin",
                            NormalizedName = "admin"
                        },
                        new
                        {
                            Id = new Guid("c489f858-aabd-4264-96c1-5cdca251d871"),
                            ConcurrencyStamp = "5d4bce45-f815-4d6e-95f3-18940c857139",
                            Description = "Staff role",
                            Name = "staff",
                            NormalizedName = "staff"
                        },
                        new
                        {
                            Id = new Guid("2f0c7b75-8934-4101-bef2-c850e42d21de"),
                            ConcurrencyStamp = "11603e7a-d6da-4069-b881-855df88ca2e9",
                            Description = "Customer role",
                            Name = "customer",
                            NormalizedName = "customer"
                        });
                });

            modelBuilder.Entity("HikiCoffee.Data.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("GenderId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MoreInfo")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TokenCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UrlImageUser")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.ToTable("AppUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("902f60d4-000c-4ec2-bb30-148f1b6547dc"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "62e9cc49-8e96-4743-8c7f-c6825f2940fd",
                            Dob = new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "nocustomer@hiki.studio.com",
                            EmailConfirmed = true,
                            FirstName = "No",
                            GenderId = 3,
                            IsActive = true,
                            LastName = "Customer",
                            LockoutEnabled = false,
                            MoreInfo = "Không có thông tin khách hàng",
                            NormalizedEmail = "nocustomer@hiki.studio.com",
                            NormalizedUserName = "nocustomer",
                            PasswordHash = "AQAAAAEAACcQAAAAEMd2KV+qeezty/WasYUQ911jddynOFylppc+fWE7kwz0f4GObNV1unbK6FQM7T/08g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UrlImageUser = "",
                            UserName = "nocustomer"
                        },
                        new
                        {
                            Id = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "df5527f2-a9a3-4907-830a-3011dbeebc28",
                            Dob = new DateTime(2001, 10, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "tranquangbhdz@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Tran",
                            GenderId = 1,
                            IsActive = true,
                            LastName = "Quang",
                            LockoutEnabled = false,
                            MoreInfo = "Chùm",
                            NormalizedEmail = "tranquangbhdz@gmail.com",
                            NormalizedUserName = "admin",
                            PasswordHash = "AQAAAAEAACcQAAAAEBRYnjsB30nFo7CuZs8MGp8JIxVKZL8LAvfLsVWTHL7XUtMHF27Cc851ewrjUCUeiQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UrlImageUser = "https://64.media.tumblr.com/f3685609f6f9e0f15b70b740380fe0db/85dff69cc547be63-1d/s640x960/a0fa84e4ec96b338ec45f925baccc9619131013c.jpg",
                            UserName = "admin"
                        },
                        new
                        {
                            Id = new Guid("5864c4b8-d809-4cf3-b721-fdb7f868cac1"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "87583a29-95ec-4ef3-bb74-e4767b46c198",
                            Dob = new DateTime(2000, 10, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "tranquanghtkbtm@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Hachiman",
                            GenderId = 1,
                            IsActive = true,
                            LastName = "Hikigaya",
                            LockoutEnabled = false,
                            MoreInfo = "8man",
                            NormalizedEmail = "tranquanghtkbtm@gmail.com",
                            NormalizedUserName = "quanghiki",
                            PasswordHash = "AQAAAAEAACcQAAAAEG8ZkN32NOT4BU/FfLM/AapLicGFUQks4UnjEamxelMaah1qTVHOZCnUi7gVJZB7Aw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UrlImageUser = "https://64.media.tumblr.com/f3685609f6f9e0f15b70b740380fe0db/85dff69cc547be63-1d/s640x960/a0fa84e4ec96b338ec45f925baccc9619131013c.jpg",
                            UserName = "quanghiki"
                        },
                        new
                        {
                            Id = new Guid("17ec17a9-06b0-4455-81b2-cf49e5626a6f"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d3947014-34b9-4cc1-a18a-e397857b10c2",
                            Dob = new DateTime(2000, 12, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "oregairu@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Yukino",
                            GenderId = 2,
                            IsActive = true,
                            LastName = "Yukinoshita",
                            LockoutEnabled = false,
                            MoreInfo = "yukino",
                            NormalizedEmail = "oregairu@gmail.com",
                            NormalizedUserName = "yukino",
                            PasswordHash = "AQAAAAEAACcQAAAAEHxeRLcB0Wf+UJN0BAu3HImwNfp4T87e+HSZkLcFuuzXwbE9ebaJWM7AczCEzOVbiA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UrlImageUser = "https://64.media.tumblr.com/f3685609f6f9e0f15b70b740380fe0db/85dff69cc547be63-1d/s640x960/a0fa84e4ec96b338ec45f925baccc9619131013c.jpg",
                            UserName = "yukino"
                        });
                });

            modelBuilder.Entity("HikiCoffee.Data.Entities.Bill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CoffeeTabelId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCheckIn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateCheckOut")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPayPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<Guid?>("UserCustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserPaymentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CoffeeTabelId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserPaymentId");

                    b.ToTable("Bills", (string)null);
                });

            modelBuilder.Entity("HikiCoffee.Data.Entities.BillInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BillId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BillId");

                    b.HasIndex("ProductId");

                    b.ToTable("BillInfos", (string)null);
                });

            modelBuilder.Entity("HikiCoffee.Data.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsShowOnHome")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<string>("UrlImageCoverCategory")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsActive = true,
                            IsShowOnHome = true,
                            SortOrder = 1,
                            UrlImageCoverCategory = "https://res.cloudinary.com/https-deptraitd-blogspot-com/image/upload/v1655137566/HikiCoffee/Image_Category/Coffee_adqju2.png"
                        },
                        new
                        {
                            Id = 2,
                            IsActive = true,
                            IsShowOnHome = true,
                            SortOrder = 1,
                            UrlImageCoverCategory = "https://res.cloudinary.com/https-deptraitd-blogspot-com/image/upload/v1655137567/HikiCoffee/Image_Category/Tea_ri0xmh.png"
                        },
                        new
                        {
                            Id = 3,
                            IsActive = true,
                            IsShowOnHome = true,
                            SortOrder = 1,
                            UrlImageCoverCategory = "https://res.cloudinary.com/https-deptraitd-blogspot-com/image/upload/v1655137566/HikiCoffee/Image_Category/Capuchino_nofwkm.png"
                        },
                        new
                        {
                            Id = 4,
                            IsActive = true,
                            IsShowOnHome = true,
                            SortOrder = 1,
                            UrlImageCoverCategory = "https://res.cloudinary.com/https-deptraitd-blogspot-com/image/upload/v1655137566/HikiCoffee/Image_Category/Beer_lxd9sc.png"
                        },
                        new
                        {
                            Id = 5,
                            IsActive = true,
                            IsShowOnHome = true,
                            SortOrder = 1,
                            UrlImageCoverCategory = "https://res.cloudinary.com/https-deptraitd-blogspot-com/image/upload/v1655137566/HikiCoffee/Image_Category/Wine_ufhg6w.png"
                        },
                        new
                        {
                            Id = 6,
                            IsActive = true,
                            IsShowOnHome = true,
                            SortOrder = 1,
                            UrlImageCoverCategory = "https://res.cloudinary.com/https-deptraitd-blogspot-com/image/upload/v1655392394/HikiCoffee/Image_Category/Juice_tn0vyi.png"
                        },
                        new
                        {
                            Id = 7,
                            IsActive = true,
                            IsShowOnHome = true,
                            SortOrder = 1,
                            UrlImageCoverCategory = "https://res.cloudinary.com/https-deptraitd-blogspot-com/image/upload/v1655392394/HikiCoffee/Image_Category/Ice_Cream_ftsjti.png"
                        },
                        new
                        {
                            Id = 8,
                            IsActive = true,
                            IsShowOnHome = true,
                            SortOrder = 1,
                            UrlImageCoverCategory = "https://res.cloudinary.com/https-deptraitd-blogspot-com/image/upload/v1655392394/HikiCoffee/Image_Category/Milktea_pkf5s5.png"
                        },
                        new
                        {
                            Id = 9,
                            IsActive = true,
                            IsShowOnHome = true,
                            SortOrder = 1,
                            UrlImageCoverCategory = "https://res.cloudinary.com/https-deptraitd-blogspot-com/image/upload/v1655392394/HikiCoffee/Image_Category/Milk_siwgx5.png"
                        });
                });

            modelBuilder.Entity("HikiCoffee.Data.Entities.CategoryTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("int");

                    b.Property<string>("NameCategory")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("SeoAlias")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("SeoDescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("SeoTitle")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CategoryTranslations", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            LanguageId = 2,
                            NameCategory = "Coffee",
                            SeoAlias = "/coffee-black-381831",
                            SeoDescription = "Good",
                            SeoTitle = "Product Coffee"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            LanguageId = 1,
                            NameCategory = "Cà Phê",
                            SeoAlias = "/ca-phe-den-838442",
                            SeoDescription = "Good Drink",
                            SeoTitle = "Sản phầm cà phê"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            LanguageId = 2,
                            NameCategory = "Tea",
                            SeoAlias = "/tea-342242",
                            SeoDescription = "Good",
                            SeoTitle = "Product Tea"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            LanguageId = 1,
                            NameCategory = "Trà",
                            SeoAlias = "/tra-837113",
                            SeoDescription = "Good Drink",
                            SeoTitle = "Sản phầm trà"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 3,
                            LanguageId = 2,
                            NameCategory = "Capuchino",
                            SeoAlias = "/capuchino-156342",
                            SeoDescription = "Good",
                            SeoTitle = "Product Capuchino"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 3,
                            LanguageId = 1,
                            NameCategory = "Capuchino",
                            SeoAlias = "/capuchino-537342",
                            SeoDescription = "Good Drink",
                            SeoTitle = "Sản phầm Capuchino"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 4,
                            LanguageId = 2,
                            NameCategory = "Beer",
                            SeoAlias = "/beer-942752",
                            SeoDescription = "Good",
                            SeoTitle = "Product Beer"
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 4,
                            LanguageId = 1,
                            NameCategory = "Bia",
                            SeoAlias = "/bia-821964",
                            SeoDescription = "Good Drink",
                            SeoTitle = "Sản phầm bia"
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 5,
                            LanguageId = 2,
                            NameCategory = "Wine",
                            SeoAlias = "/wine-105824",
                            SeoDescription = "Good",
                            SeoTitle = "Product Wine"
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 5,
                            LanguageId = 1,
                            NameCategory = "Rược",
                            SeoAlias = "/ruoc-347134",
                            SeoDescription = "Good Drink",
                            SeoTitle = "Sản phầm rược"
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 6,
                            LanguageId = 2,
                            NameCategory = "Juice",
                            SeoAlias = "/juice-942712",
                            SeoDescription = "Good",
                            SeoTitle = "Product Juice"
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 6,
                            LanguageId = 1,
                            NameCategory = "Nước ép",
                            SeoAlias = "/nuoc-ep-413521",
                            SeoDescription = "Good Drink",
                            SeoTitle = "Sản phầm nước ép"
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 7,
                            LanguageId = 2,
                            NameCategory = "Ice Cream",
                            SeoAlias = "/ice-cream-105824",
                            SeoDescription = "Good",
                            SeoTitle = "Product Ice Cream"
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 7,
                            LanguageId = 1,
                            NameCategory = "Kem",
                            SeoAlias = "/kem-521564",
                            SeoDescription = "Good Drink",
                            SeoTitle = "Sản phầm kem"
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 8,
                            LanguageId = 2,
                            NameCategory = "Milk tea",
                            SeoAlias = "/milk-tea-941712",
                            SeoDescription = "Good",
                            SeoTitle = "Product Milk Tea"
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 8,
                            LanguageId = 1,
                            NameCategory = "Trà sữa",
                            SeoAlias = "/tra-sua-983343",
                            SeoDescription = "Good Drink",
                            SeoTitle = "Sản phầm trà sữa"
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 9,
                            LanguageId = 2,
                            NameCategory = "Milk",
                            SeoAlias = "/milk-428413",
                            SeoDescription = "Good",
                            SeoTitle = "Product Milk"
                        },
                        new
                        {
                            Id = 18,
                            CategoryId = 9,
                            LanguageId = 1,
                            NameCategory = "Sữa",
                            SeoAlias = "/sua-347134",
                            SeoDescription = "Good Drink",
                            SeoTitle = "Sản phầm sữa"
                        });
                });

            modelBuilder.Entity("HikiCoffee.Data.Entities.CoffeeTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("AppointmentTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpirationTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("NameCoffeeTable")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("CoffeeTables", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsActive = true,
                            NameCoffeeTable = "Table 01",
                            StatusId = 3
                        },
                        new
                        {
                            Id = 2,
                            IsActive = true,
                            NameCoffeeTable = "Table 02",
                            StatusId = 3
                        },
                        new
                        {
                            Id = 3,
                            IsActive = true,
                            NameCoffeeTable = "Table 03",
                            StatusId = 3
                        },
                        new
                        {
                            Id = 4,
                            IsActive = true,
                            NameCoffeeTable = "Table 04",
                            StatusId = 3
                        },
                        new
                        {
                            Id = 5,
                            IsActive = true,
                            NameCoffeeTable = "Table 05",
                            StatusId = 3
                        },
                        new
                        {
                            Id = 6,
                            IsActive = true,
                            NameCoffeeTable = "Table 06",
                            StatusId = 3
                        },
                        new
                        {
                            Id = 7,
                            IsActive = true,
                            NameCoffeeTable = "Table 07",
                            StatusId = 3
                        },
                        new
                        {
                            Id = 8,
                            IsActive = true,
                            NameCoffeeTable = "Table 08",
                            StatusId = 3
                        },
                        new
                        {
                            Id = 9,
                            IsActive = true,
                            NameCoffeeTable = "Table 09",
                            StatusId = 3
                        },
                        new
                        {
                            Id = 10,
                            IsActive = true,
                            NameCoffeeTable = "Table 10",
                            StatusId = 3
                        },
                        new
                        {
                            Id = 11,
                            IsActive = true,
                            NameCoffeeTable = "Table 11",
                            StatusId = 3
                        },
                        new
                        {
                            Id = 12,
                            IsActive = true,
                            NameCoffeeTable = "Table 12",
                            StatusId = 3
                        },
                        new
                        {
                            Id = 13,
                            IsActive = true,
                            NameCoffeeTable = "Table 13",
                            StatusId = 3
                        },
                        new
                        {
                            Id = 14,
                            IsActive = true,
                            NameCoffeeTable = "Table 14",
                            StatusId = 3
                        },
                        new
                        {
                            Id = 15,
                            IsActive = true,
                            NameCoffeeTable = "Table 15",
                            StatusId = 3
                        },
                        new
                        {
                            Id = 16,
                            IsActive = true,
                            NameCoffeeTable = "Table 16",
                            StatusId = 3
                        },
                        new
                        {
                            Id = 17,
                            IsActive = true,
                            NameCoffeeTable = "Table 17",
                            StatusId = 3
                        },
                        new
                        {
                            Id = 18,
                            IsActive = true,
                            NameCoffeeTable = "Table 18",
                            StatusId = 3
                        },
                        new
                        {
                            Id = 19,
                            IsActive = true,
                            NameCoffeeTable = "Table 19",
                            StatusId = 3
                        },
                        new
                        {
                            Id = 20,
                            IsActive = true,
                            NameCoffeeTable = "Table 20",
                            StatusId = 3
                        },
                        new
                        {
                            Id = 21,
                            IsActive = true,
                            NameCoffeeTable = "Table 21",
                            StatusId = 3
                        });
                });

            modelBuilder.Entity("HikiCoffee.Data.Entities.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("NameGender")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Genders", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsActive = true,
                            NameGender = "Male"
                        },
                        new
                        {
                            Id = 2,
                            IsActive = true,
                            NameGender = "Female"
                        },
                        new
                        {
                            Id = 3,
                            IsActive = true,
                            NameGender = "Custom"
                        });
                });

            modelBuilder.Entity("HikiCoffee.Data.Entities.ImportProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateImportProduct")
                        .HasColumnType("datetime2");

                    b.Property<int>("PriceImportProduct")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("SuplierId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserIdImportProduct")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("StatusId");

                    b.HasIndex("SuplierId");

                    b.HasIndex("UserIdImportProduct");

                    b.ToTable("ImportProducts", (string)null);
                });

            modelBuilder.Entity("HikiCoffee.Data.Entities.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<bool>("IsDefault")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("NameLanguage")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Languages", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "vi-VN",
                            IsDefault = true,
                            NameLanguage = "Tiếng Việt"
                        },
                        new
                        {
                            Id = 2,
                            Code = "en-US",
                            IsDefault = false,
                            NameLanguage = "English"
                        });
                });

            modelBuilder.Entity("HikiCoffee.Data.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsFeatured")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<decimal>("OriginalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Stock")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int?>("UnitId")
                        .HasColumnType("int");

                    b.Property<string>("UrlImageCoverProduct")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("ViewCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("UnitId");

                    b.ToTable("Products", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2022, 6, 19, 22, 34, 32, 623, DateTimeKind.Local).AddTicks(7150),
                            IsActive = true,
                            IsFeatured = true,
                            OriginalPrice = 100000m,
                            Price = 90000m,
                            Stock = 0,
                            UnitId = 1,
                            UrlImageCoverProduct = "https://i.pinimg.com/originals/ea/3f/37/ea3f37ad3242d1796f7136741dcebfbd.jpg",
                            ViewCount = 0
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2022, 6, 19, 22, 34, 32, 623, DateTimeKind.Local).AddTicks(7164),
                            IsActive = true,
                            IsFeatured = false,
                            OriginalPrice = 55000m,
                            Price = 47000m,
                            Stock = 0,
                            UnitId = 1,
                            UrlImageCoverProduct = "https://coffeebean.com.vn/wp-content/uploads/2019/09/Matcha-green-tea-Affogato-1.png",
                            ViewCount = 0
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2022, 6, 19, 22, 34, 32, 623, DateTimeKind.Local).AddTicks(7167),
                            IsActive = true,
                            IsFeatured = true,
                            OriginalPrice = 84000m,
                            Price = 72000m,
                            Stock = 0,
                            UnitId = 2,
                            UrlImageCoverProduct = "https://www.coffeesphere.com/wp-content/uploads/2020/07/what-is-americano.jpeg",
                            ViewCount = 0
                        });
                });

            modelBuilder.Entity("HikiCoffee.Data.Entities.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Caption")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<string>("UrlImageProduct")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Caption = "image 1",
                            DateCreated = new DateTime(2022, 6, 19, 22, 34, 32, 623, DateTimeKind.Local).AddTicks(7292),
                            FileSize = 0L,
                            ProductId = 1,
                            SortOrder = 0,
                            UrlImageProduct = "https://icdn.dantri.com.vn/thumb_w/640/2021/03/04/vi-ca-phe-den-het-nhu-vi-cuoc-songdocx-1614866315610.png"
                        },
                        new
                        {
                            Id = 2,
                            Caption = "image 2",
                            DateCreated = new DateTime(2022, 6, 19, 22, 34, 32, 623, DateTimeKind.Local).AddTicks(7293),
                            FileSize = 0L,
                            ProductId = 1,
                            SortOrder = 0,
                            UrlImageProduct = "https://artcoffee.vn/wp-content/uploads/2020/09/8-loi-ich-to-lon-cua-viec-uong-ca-phe-den-nguyen-chat-khong-duong.jpg"
                        },
                        new
                        {
                            Id = 3,
                            Caption = "image 3",
                            DateCreated = new DateTime(2022, 6, 19, 22, 34, 32, 623, DateTimeKind.Local).AddTicks(7295),
                            FileSize = 0L,
                            ProductId = 1,
                            SortOrder = 0,
                            UrlImageProduct = "https://doisongbiz.com/wp-content/uploads/2017/04/bi-quyet-giam-can-nhanh-chong-bang-cafe-den.jpg"
                        },
                        new
                        {
                            Id = 4,
                            Caption = "image 1",
                            DateCreated = new DateTime(2022, 6, 19, 22, 34, 32, 623, DateTimeKind.Local).AddTicks(7296),
                            FileSize = 0L,
                            ProductId = 2,
                            SortOrder = 0,
                            UrlImageProduct = "https://images.japancentre.com/recipes/pics/16/main/matcha-latte.jpg?1469572822"
                        },
                        new
                        {
                            Id = 5,
                            Caption = "image 2",
                            DateCreated = new DateTime(2022, 6, 19, 22, 34, 32, 623, DateTimeKind.Local).AddTicks(7297),
                            FileSize = 0L,
                            ProductId = 2,
                            SortOrder = 0,
                            UrlImageProduct = "https://gimmedelicious.com/wp-content/uploads/2018/03/Iced-Matcha-Latte2.jpg"
                        },
                        new
                        {
                            Id = 6,
                            Caption = "image 1",
                            DateCreated = new DateTime(2022, 6, 19, 22, 34, 32, 623, DateTimeKind.Local).AddTicks(7298),
                            FileSize = 0L,
                            ProductId = 3,
                            SortOrder = 0,
                            UrlImageProduct = "https://cdn.tgdd.vn/2021/11/CookDish/americano-la-gi-nguon-goc-cach-pha-americano-don-gian-va-avt-1200x676.jpg"
                        });
                });

            modelBuilder.Entity("HikiCoffee.Data.Entities.ProductInCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("CategoryId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductInCategories", (string)null);

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            ProductId = 1
                        },
                        new
                        {
                            CategoryId = 2,
                            ProductId = 2
                        },
                        new
                        {
                            CategoryId = 1,
                            ProductId = 3
                        });
                });

            modelBuilder.Entity("HikiCoffee.Data.Entities.ProductTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Details")
                        .HasMaxLength(3800)
                        .HasColumnType("nvarchar(3800)");

                    b.Property<int>("LanguageId")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("int");

                    b.Property<string>("NameProduct")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("SeoAlias")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("SeoDescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("SeoTitle")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductTranslations", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Cà phê đen thơm ngon từng vị",
                            Details = "<h2><span style='font-size: 95%;'>Cà phê đen đóng chai nguyên chất tại Hà Nội</span></h2><p>Mua<strong> cà phê đen đóng chai </strong>online vào thời điểm này đang là lựa chọn số một cho những người yêu thích cà phê. Tình hình chống dịch của Hà Nội đang rất căng thẳng. Hàng quán thì đóng cửa, đi lại bị hạn chế, và không được tụ tập đông người. Nên cách tốt nhất vẫn là ngồi ở nhà hay ở chỗ làm và mua online một ly cà phê để thưởng thức</p>",
                            LanguageId = 1,
                            NameProduct = "Cà phê đen",
                            ProductId = 1,
                            SeoAlias = "/ca-phe-den-193412",
                            SeoDescription = "Cafe đen bạn của mọi nhà",
                            SeoTitle = "Cafe đen đậm vị thơm ngon"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Black Coffee Is The Best",
                            Details = "Black Coffee",
                            LanguageId = 2,
                            NameProduct = "Black Coffee",
                            ProductId = 1,
                            SeoAlias = "/black-coffee-918413",
                            SeoDescription = "Coffee",
                            SeoTitle = "Black Coffee"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Trà xanh siêu ngon",
                            Details = "Trà xanh Matcha siêu <strong>thơm</strong> ngon",
                            LanguageId = 1,
                            NameProduct = "Trà xanh Matcha",
                            ProductId = 2,
                            SeoAlias = "/tra-xanh-matcha-741413",
                            SeoDescription = "Trà xanh Matcha",
                            SeoTitle = "Trà xanh Matcha"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Matcha Green Tea",
                            Details = "Matcha Green Tea Is The Best",
                            LanguageId = 2,
                            NameProduct = "Matcha Green Tea",
                            ProductId = 2,
                            SeoAlias = "/matcha-green-tea-414131",
                            SeoDescription = "Matcha Green Tea",
                            SeoTitle = "Matcha Green Tea"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Cà phê Americano",
                            Details = "Cà phê Americano Ngon",
                            LanguageId = 1,
                            NameProduct = "Cà phê Americano",
                            ProductId = 3,
                            SeoAlias = "/ca-phe-americano-371471",
                            SeoDescription = "Cà phê Americano",
                            SeoTitle = "Cà phê Americano"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Americano",
                            Details = "Americano",
                            LanguageId = 2,
                            NameProduct = "Americano",
                            ProductId = 3,
                            SeoAlias = "/americano-347272",
                            SeoDescription = "Americano",
                            SeoTitle = "Americano"
                        });
                });

            modelBuilder.Entity("HikiCoffee.Data.Entities.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.HasKey("Id");

                    b.ToTable("Statuses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2022, 6, 19, 22, 34, 32, 584, DateTimeKind.Local).AddTicks(5785),
                            IsActive = true
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2022, 6, 19, 22, 34, 32, 584, DateTimeKind.Local).AddTicks(5800),
                            IsActive = true
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2022, 6, 19, 22, 34, 32, 584, DateTimeKind.Local).AddTicks(5801),
                            IsActive = true
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTime(2022, 6, 19, 22, 34, 32, 584, DateTimeKind.Local).AddTicks(5802),
                            IsActive = true
                        },
                        new
                        {
                            Id = 5,
                            DateCreated = new DateTime(2022, 6, 19, 22, 34, 32, 584, DateTimeKind.Local).AddTicks(5803),
                            IsActive = true
                        });
                });

            modelBuilder.Entity("HikiCoffee.Data.Entities.StatusTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("NameStatus")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("StatusId");

                    b.ToTable("StatusTranslations", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LanguageId = 1,
                            NameStatus = "Đã Thanh Toán",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 2,
                            LanguageId = 2,
                            NameStatus = "Paid",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 3,
                            LanguageId = 1,
                            NameStatus = "Chưa Thanh Toán",
                            StatusId = 2
                        },
                        new
                        {
                            Id = 4,
                            LanguageId = 2,
                            NameStatus = "Unpaid",
                            StatusId = 2
                        },
                        new
                        {
                            Id = 5,
                            LanguageId = 1,
                            NameStatus = "Bàn Còn Trống",
                            StatusId = 3
                        },
                        new
                        {
                            Id = 6,
                            LanguageId = 2,
                            NameStatus = "Tables Are Empty",
                            StatusId = 3
                        },
                        new
                        {
                            Id = 7,
                            LanguageId = 1,
                            NameStatus = "Bàn Đang Sử Dụng",
                            StatusId = 4
                        },
                        new
                        {
                            Id = 8,
                            LanguageId = 2,
                            NameStatus = "Table In Use",
                            StatusId = 4
                        },
                        new
                        {
                            Id = 9,
                            LanguageId = 1,
                            NameStatus = "Hóa Đơn Đã Được Gộp",
                            StatusId = 5
                        },
                        new
                        {
                            Id = 10,
                            LanguageId = 2,
                            NameStatus = "Invoices Consolidated",
                            StatusId = 5
                        });
                });

            modelBuilder.Entity("HikiCoffee.Data.Entities.Suplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("ContractDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("MoreInfo")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("NameSuplier")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Supliers", (string)null);
                });

            modelBuilder.Entity("HikiCoffee.Data.Entities.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.HasKey("Id");

                    b.ToTable("Uses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsActive = true
                        },
                        new
                        {
                            Id = 2,
                            IsActive = true
                        });
                });

            modelBuilder.Entity("HikiCoffee.Data.Entities.UnitTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("LanguageId")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("int");

                    b.Property<string>("MoreInfo")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("NameUnit")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UnitId");

                    b.ToTable("UnitTranslations", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LanguageId = 1,
                            MoreInfo = "",
                            NameUnit = "Không có",
                            UnitId = 1
                        },
                        new
                        {
                            Id = 2,
                            LanguageId = 2,
                            MoreInfo = "",
                            NameUnit = "Not Found",
                            UnitId = 1
                        },
                        new
                        {
                            Id = 3,
                            LanguageId = 1,
                            MoreInfo = "",
                            NameUnit = "Cỡ X",
                            UnitId = 2
                        },
                        new
                        {
                            Id = 4,
                            LanguageId = 2,
                            MoreInfo = "Size X",
                            NameUnit = "Size X",
                            UnitId = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AppRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AppUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("AppUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("0b64f6f0-9f60-45c9-9e7b-f68ccc3fc57f"),
                            RoleId = new Guid("e1db1200-1bb6-4156-9da3-135e91d94aba")
                        },
                        new
                        {
                            UserId = new Guid("5864c4b8-d809-4cf3-b721-fdb7f868cac1"),
                            RoleId = new Guid("c489f858-aabd-4264-96c1-5cdca251d871")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserTokens", (string)null);
                });

            modelBuilder.Entity("HikiCoffee.Data.Entities.AppointmentSchedule", b =>
                {
                    b.HasOne("HikiCoffee.Data.Entities.CoffeeTable", "CoffeeTable")
                        .WithMany("AppointmentSchedules")
                        .HasForeignKey("CoffeeTableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HikiCoffee.Data.Entities.Status", null)
                        .WithMany("AppointmentSchedules")
                        .HasForeignKey("StatusId");

                    b.HasOne("HikiCoffee.Data.Entities.AppUser", "AppUser")
                        .WithMany("AppointmentSchedules")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("CoffeeTable");
                });

            modelBuilder.Entity("HikiCoffee.Data.Entities.AppUser", b =>
                {
                    b.HasOne("HikiCoffee.Data.Entities.Gender", "Gender")
                        .WithMany("AppUsers")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("HikiCoffee.Data.Entities.Bill", b =>
                {
                    b.HasOne("HikiCoffee.Data.Entities.CoffeeTable", "CoffeeTable")
                        .WithMany("Bills")
                        .HasForeignKey("CoffeeTabelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HikiCoffee.Data.Entities.Status", "Status")
                        .WithMany("Bills")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HikiCoffee.Data.Entities.AppUser", "AppUser")
                        .WithMany("Bills")
                        .HasForeignKey("UserPaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("CoffeeTable");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("HikiCoffee.Data.Entities.BillInfo", b =>
                {
                    b.HasOne("HikiCoffee.Data.Entities.Bill", "Bill")
                        .WithMany("BillInfos")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HikiCoffee.Data.Entities.Product", "Product")
                        .WithMany("BillInfos")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bill");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("HikiCoffee.Data.Entities.CategoryTranslation", b =>
                {
                    b.HasOne("HikiCoffee.Data.Entities.Category", "Category")
                        .WithMany("CategoryTranslations")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HikiCoffee.Data.Entities.Language", "Language")
                        .WithMany("CategoryTranslations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("HikiCoffee.Data.Entities.CoffeeTable", b =>
                {
                    b.HasOne("HikiCoffee.Data.Entities.Status", "Status")
                        .WithMany("CoffeeTables")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("HikiCoffee.Data.Entities.ImportProduct", b =>
                {
                    b.HasOne("HikiCoffee.Data.Entities.Product", "Product")
                        .WithMany("ImportProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HikiCoffee.Data.Entities.Status", null)
                        .WithMany("ImportProducts")
                        .HasForeignKey("StatusId");

                    b.HasOne("HikiCoffee.Data.Entities.Suplier", "Suplier")
                        .WithMany("ImportProducts")
                        .HasForeignKey("SuplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HikiCoffee.Data.Entities.AppUser", "AppUser")
                        .WithMany("ImportProducts")
                        .HasForeignKey("UserIdImportProduct")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Product");

                    b.Navigation("Suplier");
                });

            modelBuilder.Entity("HikiCoffee.Data.Entities.Product", b =>
                {
                    b.HasOne("HikiCoffee.Data.Entities.Unit", "Unit")
                        .WithMany("Products")
                        .HasForeignKey("UnitId");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("HikiCoffee.Data.Entities.ProductImage", b =>
                {
                    b.HasOne("HikiCoffee.Data.Entities.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("HikiCoffee.Data.Entities.ProductInCategory", b =>
                {
                    b.HasOne("HikiCoffee.Data.Entities.Category", "Category")
                        .WithMany("ProductInCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HikiCoffee.Data.Entities.Product", "Product")
                        .WithMany("ProductInCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("HikiCoffee.Data.Entities.ProductTranslation", b =>
                {
                    b.HasOne("HikiCoffee.Data.Entities.Language", "Language")
                        .WithMany("ProductTranslations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HikiCoffee.Data.Entities.Product", "Product")
                        .WithMany("ProductTranslations")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("HikiCoffee.Data.Entities.StatusTranslation", b =>
                {
                    b.HasOne("HikiCoffee.Data.Entities.Language", "Language")
                        .WithMany("StatusTranslations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HikiCoffee.Data.Entities.Status", "Status")
                        .WithMany("StatusTranslations")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("HikiCoffee.Data.Entities.UnitTranslation", b =>
                {
                    b.HasOne("HikiCoffee.Data.Entities.Language", "Language")
                        .WithMany("UnitTranslations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HikiCoffee.Data.Entities.Unit", "Unit")
                        .WithMany("UnitTranslations")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("HikiCoffee.Data.Entities.AppUser", b =>
                {
                    b.Navigation("AppointmentSchedules");

                    b.Navigation("Bills");

                    b.Navigation("ImportProducts");
                });

            modelBuilder.Entity("HikiCoffee.Data.Entities.Bill", b =>
                {
                    b.Navigation("BillInfos");
                });

            modelBuilder.Entity("HikiCoffee.Data.Entities.Category", b =>
                {
                    b.Navigation("CategoryTranslations");

                    b.Navigation("ProductInCategories");
                });

            modelBuilder.Entity("HikiCoffee.Data.Entities.CoffeeTable", b =>
                {
                    b.Navigation("AppointmentSchedules");

                    b.Navigation("Bills");
                });

            modelBuilder.Entity("HikiCoffee.Data.Entities.Gender", b =>
                {
                    b.Navigation("AppUsers");
                });

            modelBuilder.Entity("HikiCoffee.Data.Entities.Language", b =>
                {
                    b.Navigation("CategoryTranslations");

                    b.Navigation("ProductTranslations");

                    b.Navigation("StatusTranslations");

                    b.Navigation("UnitTranslations");
                });

            modelBuilder.Entity("HikiCoffee.Data.Entities.Product", b =>
                {
                    b.Navigation("BillInfos");

                    b.Navigation("ImportProducts");

                    b.Navigation("ProductImages");

                    b.Navigation("ProductInCategories");

                    b.Navigation("ProductTranslations");
                });

            modelBuilder.Entity("HikiCoffee.Data.Entities.Status", b =>
                {
                    b.Navigation("AppointmentSchedules");

                    b.Navigation("Bills");

                    b.Navigation("CoffeeTables");

                    b.Navigation("ImportProducts");

                    b.Navigation("StatusTranslations");
                });

            modelBuilder.Entity("HikiCoffee.Data.Entities.Suplier", b =>
                {
                    b.Navigation("ImportProducts");
                });

            modelBuilder.Entity("HikiCoffee.Data.Entities.Unit", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("UnitTranslations");
                });
#pragma warning restore 612, 618
        }
    }
}
